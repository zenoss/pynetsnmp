import ctypes
import logging
import typing

from .errors import SnmpTimeoutError

def getLogger(str) -> logging.Logger: ...

class netsnmp_session(ctypes.Structure): ...
class netsnmp_pdu(ctypes.Structure): ...
class netsnmp_transport(ctypes.Structure): ...

# include/net-snmp/types.h
class netsnmp_trap_stats(ctypes.Structure): ...

lib: ctypes.CDLL

localname: list
paramName: list
transportConfig: list
trapStats: list
msgMaxSize: list
baseTransport: list
fOpen: list
fConfig: list
fCopy: list
fSetupSession: list
identifier: list
fGetTaddr: list

SNMP_VERSION_MAP: dict[str, int]

class counter64(ctypes.Structure): ...

# include/net-snmp/types.h
class netsnmp_vardata(ctypes.Union): ...
class netsnmp_variable_list(ctypes.Structure): ...

netsnmp_pdu_p: type[ctypes._Pointer[netsnmp_pdu]]

# Redirect netsnmp logging to our log
class netsnmp_log_message(ctypes.Structure):
    pass

PRIORITY_MAP: dict[int, int]

# snmplib/snmp_logging.c -> free(logh);
# include/net-snmp/output_api.h
# int snmp_log(int priority, const char *format, ...);
# in net-snmp -> snmp_log(LOG_ERR|WARNING|INFO|DEBUG, msg)
def netsnmp_logger(a, b, msg: str) -> int: ...

# netsnmp_logger: log_callback(netsnmp_logger)

# A pointer to a _CallbackData struct is used for the callback_magic
# parameter on the netsnmp_session structure.  In the case of a SNMP v3
# authentication error, a portion of the data pointed by callback_magic
# is overwritten.  The 'reserved' member of the _CallbackData struct
# allocates enough space for the net-snmp library to write into without
# corrupting the rest of the struct.
class _CallbackData(ctypes.Structure): ...

class Session(object):
    cb: typing.Callable
    kw: dict
    sess: netsnmp_session | None

    def __init__(self, cmdLineArgs=(), freeEtimelist=True, **kw): ...
    def open(self): ...
    def awaitTraps(
        self, peername, fileno=-1, pre_parse_callback=None, debug=False
    ): ...
    def create_users(self, users): ...
    def sendTrap(self, trapoid, varbinds=None): ...
    def close(self): ...
    def callback(self, pdu): ...
    def timeout(self, reqid): ...
    def sget(self, oids): ...
    def get(self, oids): ...
    def getbulk(self, nonrepeaters, maxrepetitions, oids): ...
    def walk(self, root): ...

def mkoid(n): ...
def strToOid(oidStr): ...
def decodeOid(pdu): ...
def decodeIp(pdu) -> str: ...
def decodeBigInt(pdu) -> int: ...
def decodeString(pdu) -> bytes: ...

_valueToConstant: dict[str, int]

def getResult(pdu, log) -> list: ...

class NetSnmpError(Exception):
    def __init__(self, why): ...

sessionMap: dict[str, Session]

def _callback(operation, sp, reqid, pdu, magic) -> int: ...
def _doNothingProc(argc, argv, arg): ...
def parse_args(args, session): ...

_NoAttribute: object

def initialize_session(sess, cmdLineArgs, kw): ...
def _init_from_args(sess, cmdLineArgs, kw): ...
def _update_session(attr, value, pv, sess): ...
def _escape_char(char, text): ...

MAXFD: int
FD_SETSIZE: int
fdset: ctypes.Array[ctypes.c_int32]

class timeval(ctypes.Structure): ...

def fdset2list(rd, n) -> list: ...

class netsnmp_large_fd_set(ctypes.Structure): ...

def snmp_select_info() -> tuple[list, int]: ...
def snmp_select_info2() -> tuple[list, int | None]: ...
def snmp_read(fd: int) -> int: ...
def snmp_read2(fd: int): ...

done: bool

__all__ = ("SnmpTimeoutError",)
